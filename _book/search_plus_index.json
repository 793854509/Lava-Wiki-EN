{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction This is a repository for Markdown source files for Lava Wiki... "},"about/about-lavawiki.html":{"url":"about/about-lavawiki.html","title":"About Lava Wiki","keywords":"","body":"关于Lava百科 Lava百科是有Lava社区成员、社区志愿者以及技术社区志愿者共同维护的百科全书式资料库。 您可以在Lava百科： 了解Lava的基本信息 获取关于Lava的常用网站链接 学习如何使用Lava钱包 了解PoC共识机制 了解Lava特有的算力绑定和火石机制 解决常见的疑惑 作为志愿者贡献原创内容 如需了解更多，可以移步Lava参考链接汇总： 参考链接汇总 或者通过社交媒体联系Lava（中国）社区。 "},"about/about-learninglava.html":{"url":"about/about-learninglava.html","title":"Learn about Lava","keywords":"","body":"了解Lava 开源、共识、去中心化： Lava是一个开源的、去中心化的数字加密货币和数字基础设施。 Lava基于空间容量证明（Proof of Capacity，PoC）的共识机制。PoC矿工向网络证明其占有的存储介质容量，参与区块锻造的竞争，维护去中心化网络的安全与可信。Lava是一个无需许可、不设门槛的共识协议，无论您在全球何地、持有何种存储介质，都可以通过贡献存储容量的方式参与Lava的共识。Lava具备可无限扩展的协议开放性。 清洁的锻造方式： 参与Lava区块链的PoC锻造，并不像刻板印象中那样耗费电力。Lava的锻造过程依赖静态存储的数据，因此无需运行高性能计算设备。在仅消耗数百分之一电力的情况下，一个PoC协议网络即可取得等同于工作量证明（PoW）协议网络的安全性。 更重要的是，PoW存在难以避免的算力ASIC化趋势，削弱了系统去中心化的程度；而基于通用设备--存储设备锻造区块的PoC协议天然规避了此类问题。因此，PoC具备更加开放、平等与去中心化潜质的共识机制。 Lava特有的火石机制： 火石（Firestone）是Lava特有的次级（Sub-Layer）或夹层（Mezzanine）凭证。火石是Lava生态参与者的贡献凭证与权益凭证，可以通过Lava共识进行定义和调整。火石是具有开创性和颠覆性的去中心化生态底层机制，创造了一种有别于原生代币（Native Token）的系统权益管理方式。 当前，Lava生态的参与者可以通过向系统抵押LV代币获取火石，火石将在抵押行为的下一个周期（Slot）中生效。火石拥有者可以在出块时选择使用火石，并获得双倍标准的额外出块奖励。 探索有意义存储： ava区块链从全球存储空间中凝结强大的共识价值，成为分布式社会协作的信任基础设施。但Lava不止步于此：受益于日渐成熟的跨链通信技术，以及不断壮大的内容寻址分布式存储网络规模，Lava可实现将信任价值反哺于可实现社会价值的去中心化存储应用。 在未来，Lava将分步建立基于第二层嵌入（Layer2 Embedment）、顶层索引（Top-level Indexing）的主体协议架构，支持任意基于内容寻址的分布式存储网络以Layer2形式对Lava主链的嵌入。 "},"about/about-links.html":{"url":"about/about-links.html","title":"Ref Links","keywords":"","body":"参考链接汇总 Lava官方网站（中文版）： https://www.lavatech.org/ Lava区块链浏览器（主网）： http://explorer.lavatech.org/ Lava白皮书（中文版）： https://www.lavatech.org/pdf GitHub开源代码： https://github.com/lavaio/lava Lava改进提案系统（LVIP）： https://github.com/lavaio/lvips Lava官方公告栏： https://www.lavatech.org/notice "},"about/about-downloads.html":{"url":"about/about-downloads.html","title":"Downloads","keywords":"","body":"下载汇总 为确保下载链接的时效性，我们建议您移步至Lava官方网站->下载链接处根据所需进行下载。 https://www.lavatech.org/ 您可在官网首页顶部的菜单栏寻找到“下载”按钮，或拖动至首页底部导航栏选择下载项目。 目前，Lava官方网站提供以下所列下载项目： Linux全节点钱包 Windows全节点钱包 Mac OS全节点钱包 Windows轻钱包 Windows GUI全节点钱包（图形界面版本的全节点钱包） Mac OS GUI全节点钱包（图形界面版本的全节点钱包） Android手机钱包（轻钱包） Lava Miner（Lava挖矿终端） "},"firestone/firestone-firestone.html":{"url":"firestone/firestone-firestone.html","title":"Firestone","keywords":"","body":"了解火石 什么是火石 火石Firestone是Lava的贡献证明与权益证明。 火石是一种在链上动态生成、动态消耗的特殊凭证。 如何获得火石 目前阶段，用户可以通过向系统抵押LV获得火石。 获得火石的行为可通俗地理解为“使用LV购买火石”，但需注意这只是通俗的理解，并不是真正的“购买”行为。 用户实际上是通过发起一笔特殊的链上交易，向系统抵押一定数量的LV，得到对应的火石。 火石的“价格” 在发起“购买”火石的交易时，系统会定义一个“价格”，表示“抵押多少LV可以获得一个火石”。 火石的价格是由系统动态调整的。 火石周期Slot Lava区块链根据固定块高划分周期，称为火石周期Slot。 在主网中，每2048个块高构成一个火石周期。(测试网与主网参数可能不一致，请查询测试网参数介绍部分获得详细信息) 用户需要在第N-1周期购买可在第N周期生效可使用的火石，该火石在第N+1周期过期（如果没有被使用的话）。 如果用户在火石生效的周期内成功出块，就可以消耗一个火石，该块即双倍产出块奖励。 例如在第一个减半周期内，正常产出320LV每块，如果在消耗火石的情况下，即可产出640LV每块。 火石的过期和释放 在第N-1周期购买的火石，在该周期内是不可使用的状态； 到第N周期生效可使用； 如果用户恰好在第N周期内出块，系统可消耗火石（一个块对应消耗一个火石），如果火石被消耗，抵押的LV会自动释放； 如果用户在第N周期内没有出块，火石会在第N+1周期过期，用户需要手动释放过期未使用火石抵押的资金。 火石的价格调整 每个火石周期Slot都会由系统自动调整火石价格。 如果上一周期火石存量（即该周期内全网实际购买生成的火石数量）超过目标值2048，则本周期火石价格上调5%； 如果上一周期火石存量（即该周期内全网实际购买生成的火石数量）低于目标值2048，则本周期火石价格下降5%； 火石价格调整机制的目的是促进达到火石供需的动态平衡。 "},"firestone/firestone-firetoneoperation.html":{"url":"firestone/firestone-firetoneoperation.html","title":"Using Firestone","keywords":"","body":"购买与释放火石 向系统抵押LV获得火石（即购买火石）： .\\lava-cli.exe -rpcuser=test -rpcpassword=test buyfirestone \"购买火石的地址\" \"指定找零地址\" 成功执行返回交易ID。 需要注意，火石是关联到地址的。例如，您通过该命令给地址A购买了火石，未来只有地址A的私钥能够使用火石以及释放火石。 一般情况下，给挖矿地址购买火石即可，这样当您的挖矿地址出块时，火石也会被自动使用以获得双倍Coinbase收益。 此外，buyfirestone命令目仅支持向P2PKH地址（Pay2PubkeyHash地址，主网1开头地址）购买火石，不支持向P2SH地址（隔离见证地址，主网3开头地址）购买火石。 找零地址是指购买火石交易引用了可用的TX Input余额后，向用户返回多余资金时接受找零资金的地址。 查询当前周期（Slot）信息： .\\lava-cli.exe -rpcuser=test -rpcpassword=test getslotinfo 返回结果如下： { \"index\": 5, \"price\": 16716105000, \"count\": 10, \"locktime\": 767 } 说明： index表示现在处于第几个周期（Slot），周期从0开始计，即第一个周期的index=0。 ticketprice表示当前火石的价格，需要注意该价格是以satoshi为单位，除以100000000得到以LV计的价格。 ticketcount表示当前全网已经购买的火石数量。 locktime表示在当前周期购买火石的成熟块高，达到这个块高以后才可以使用现在购买的火石。 查询地址持有火石情况： .\\lava-cli.exe -rpcuser=test -rpcpassword=test getfirestone “你要查询的地址” 返回结果如下： [ { \"outpoint\": \"615fb809eb973667ea8523ecf11bf93eafdf7924521bc172abb09329d141a3e8:1\", \"address\": \"n4CpQvwua2NXnoq7rJbp41JzbcvUGDL1f1\", \"lockheight\": 511, \"state\": \"IMMATURATE\", \"isSpent\": false } ] 说明： outpoint表示购买火石的交易ID，即当时购买该火石所发起的交易记录。 address表示火石所关联的地址。 lockheight表示该火石在这个块高以后为可用状态。 state表示火石的状态，IMMATURATE表示还未成熟（请等待下一个周期成熟），USABLE表示现在可用，OVERDUE表示已经过期。 isSpent表示火石是否被使用。false表示未被使用。 释放过期的火石 如果火石在出块的时候消耗掉了，就不需要手动释放；如果没有被消耗掉，需要在过期后手动释放。 .\\lava-cli.exe -rpcuser=test -rpcpassword=test freefirestone \"持有火石的地址\" \"接受释放资金的地址\" 成功释放后返回交易ID。 如果您希望抵押的资金释放回原先持有火石的地址，两个地址填一样的即可。 "},"firestone/firestone-coldfirestone.html":{"url":"firestone/firestone-coldfirestone.html","title":"ColdFirestone","keywords":"","body":"了解冷火石 *注释：“冷火石”是LVIP-0002改进提案所提出的设想，目前尚未被更新到共识中。如需查看LVIP-0002原文，请前往： __https://github.com/lavaio/lvips/blob/master/livp-0002.mediawiki__ 概述 LVIP-0002建议了一种允许用户预先构造花费火石的交易，即冷火石。 该机制下，用户可以购买火石到自己的地址，并在购买火石交易的基础上构造下一笔花费火石的交易。该机制可以实现的效果是，用户不再需要将火石购买到他人地址上，也可以让他人花费该火石。 该机制的目的是保护用户资金安全，让火石机制更加去中心化和去信任化。 冷火石的运行过程可被拆解为：先由火石购买者将购买的火石“加工”为冷火石并发送给实际使用者，火石使用者“装填”冷火石使其进入待用状态。 动机 本方案的动机来自现有火石机制在设计上的缺陷。 假设Alice有一个地址Addr-A，Bob有一个地址Addr-B，且双方都持有自己地址的私钥。 假设Alice是持有LV资金的普通用户，而Bob是矿工。Alice和Bob协商，由Alice给Bob的地址Addr-B购买一个火石（使用buyfirestone命令）。这样如果Bob成功打包了区块，Bob就可以使用这个火石，抵押资金返还到Bob的地址Addr-B；如果Bob没有在火石过期前成功打包区块，就需要手工释放火石并归还抵押的资金（使用freefirestone命令）。 这种现有机制可以允许矿工利用他人的资金购买并使用火石。对于资金富余但是不挖矿的用户，也可以通过提供火石获取一定的收益。因此，这是一个可以满足供需双方需要的双赢机制，是有益的。 但是，该机制是有风险的，即Alice给Bob购买火石后，由于火石是在Bob的地址上，那么相当于Alice已经失去了对火石的控制权。当火石被使用或者过期后，都必须由Bob手动操作释放或者归还释放后的资金至Alice的地址。因此，这一机制必须在Alice信任Bob的前提下才能有效地运行。 改进设想：冷火石 由上述问题，作者提出一个可以避免信任问题和安全问题的改进方案，称之为“冷火石”。 在介绍新的设想之前，有必要概述现有火石机制的技术要点。 用户购买火石时，实际上是生成了一笔交易（暂且称其为“购买火石的交易”），并向全网广播、打包上链。并且，无论用户是给自己的地址购买，还是给他人的地址购买，从技术的角度来说都是同样的交易结构，只是Output所写解锁条件内含的地址不同而已。 矿工挖矿时，如果成功铸造区块，矿工可以在构造Coinbase交易以外，再引用某个“购买火石的交易”并构造一笔花费火石的TX（暂且称其为“花费火石的交易”）。该交易的存在可使得Coinbase交易判定挖矿奖励翻倍，同时释放火石冻结的LV回到火石所在的地址。 而在冷火石的设想中，Alice直接向自己的地址购买火石，形成一笔“购买火石的交易”并广播，再引用该交易直接构造出后续“花费火石的交易”。 在构造后续“花费火石的交易”时，Alice会对交易用自己私钥完成签名，因此该交易实质上是“Anybody can spend”状态。 Alice构造完成该笔“花费火石的交易”后，并不广播这笔交易，而是将交易的原始数据（hex格式）发送给Bob。这一交易数据称之为“冷火石”，可以理解为是“准备好待用的火石”。 在整个过程中，Alice根本无需将火石购买到Bob的地址，Bob也根本无需对冷火石进行任何签名操作，因此自己的资金不会面临被Bob侵吞、强占或转移的风险。如果Bob最终没有能够花费掉冷火石，Alice可以自行使用freefirestone命令释放火石并取得抵押资金。 综上，冷火石可以很好地解决在给他人买火石时，需要信任成本和资金无法归还的问题，火石机制可以更加去中心化。 更新：好 "},"firestone/firestone-coldfsoperation.html":{"url":"firestone/firestone-coldfsoperation.html","title":"Using ColdFirestone","keywords":"","body":"加工和使用冷火石 冷火石机制的运行过程 (1)Alice使用buyfirestone命令给自己的地址购买火石，生成“购买火石的交易”，并广播。 (2)Alice使用signfirestone命令构造出后续“花费火石的交易”（后文的“加工冷火石”），不广播。 (3)Alice将冷火石发送给Bob。 (4)Bob使用importfirestone命令将冷火石转入自己的挖矿节点，使挖矿节点能够辨认和花费冷火石（后文的“装填冷火石”）。 (5)如果Bob成功出块，花费冷火石得到双倍挖矿奖励，冷火石抵押的资金自动返回Alice的地址；如果Bob没有在有效期内花费冷火石，Alice使用freefirestone命令释放火石抵押的资金返回自己的地址。 加工冷火石 Alice通过signfirestone命令将已购买的火石加工为冷火石。 *功能说明：用户指定一枚已购买的火石，加工得到一枚冷火石。 *参数1： Address，指已经购买了火石的地址，在此例中就是Alice自己的地址。必须保证钱包中有该地址的私钥，方可进行冷火石签名。 *参数2：TXID，是指 “购买火石的交易”的TXID。 *返回值：FSTX，是指构造完成“花费火石的交易”后的交易内容，以hex形式表现，也可以理解为就是冷火石的本体。 装填冷火石 Bob接受冷火石后，需要进行装填操作，使自己的挖矿节点可以辨认并花费这枚冷火石。 *功能说明：将接收到的冷火石（以hex格式体现）输入挖矿节点，使得挖矿节点可以辨认并花费冷火石。 *参数1：FSTX，冷火石的hex字节串。 *返回值： true|false：如果装填成功，返回true，否则返回false。 "},"firestone/firestone-faq.html":{"url":"firestone/firestone-faq.html","title":"Firestone FAQ","keywords":"","body":"火石FAQ 火石是一种代币吗？ 火石不是一种代币，它既不是Lava生态内的原生代币，也不是所谓的“二层代币”或类似以太坊的ERC20标准的Token。火石是一种Lava独创的特殊链上凭证，需要用户通过向系统抵押LV（LV是Lava的原生代币）获得。因此，火石可以被认为是一种次级（Sub-Layer）或者夹层（Mezzanine）形式的凭证。 火石可以流通或交易吗？ 按照目前的机制，火石是不可流通和直接交易的。但是，可以通过特别的手段允许火石的使用权利进行流转和交易。LVIP-0002提出的“冷火石”设想可以使得火石的使用权获得流通的能力。 火石的数量是有限的吗？ 在每个周期内，系统不会限制用户获取火石的数量（只要用户能够抵押足够的LV即可）。但是，火石有一个目标数量（Target）=2048，一旦某个周期内用户实际获取的火石超过这个目标数量，下一周期火石的价格就会上升5%，对火石的数量起到一定打压作用。火石的数量和价格会通过这样的市场机制进行调节，已达到供需平衡。 火石过期后，抵押的LV会自动返还吗？ 当用户取得火石后，不外乎两种情况：①火石在有效期内被使用。②火石没有被使用，直至过期。第一种情况，火石的抵押资金（即当初为了获取火石而向系统抵押的LV）会自动返回到用户地址。第二种情况，需要用户在火石过期后手动操作释放抵押资金。具体操作请参考：购买与释放火石 火石仅仅是被设计为实现“抵押挖矿”的吗？ 按照设计，火石本质上是贡献凭证+权益凭证的结合体。贡献凭证，是指对于为Lava生态作出贡献的成员，可以通过授予火石的方式给予奖励；权益凭证，是指火石本身可以作为某种利益或权利的载体，持有火石者使用火石来交换特定的利益或权利。参与者向生态作出贡献并获得权利、权利被赋予向生态作出贡献的参与者，这是具有内在一致性的合理逻辑。 通过抵押LV获取火石、通过使用火石获得额外挖矿收益，只是上述思想的一种具体体现。在Lava运行初期，我们认为能够抵押LV是一种为生态作出信任背书的行为，因此可以得到额外挖矿收益的奖励。在未来，我们期待更多的贡献形式和与之相匹配的奖励形式。 "},"mining/mining-poc.html":{"url":"mining/mining-poc.html","title":"PoC Consensus","keywords":"","body":"了解PoC共识 简单了解PoC共识 PoC是Proof-of-Capacity的简写，中文直译为“容量证明”，亦有称为“空间证明”或“空间容量证明”。 PoC 是一种基于存储空间的共识机制，锻造人（矿工）通过提供更大的存储空间容量来提高制造区块的成功率。 PoC 锻造人依赖于静态存储的特殊数据参与锻造区块的竞争。这些特殊数据是按照特定哈希算法得到的一系列有序计算结果的阵列，由锻造人预先通过计算生成、并通过密码学手段绑定在锻造人地址下。由此方式处理完成的数据被称为Plot 文件。 锻造过程中，共识机制通过待产出区块的数据，随机性指定 Plot 文件数据阵列中的特定位置。参与锻造的竞争者检索自身 Plot 文件中的对应数据，生成一个 Deadline；Deadline 表示节点可广 播新区块前等待时间，因此产生最小 Deadline 意味着锻造成功。考虑到 Plot 文件可以一次生成、长期保存并重复使用，而锻造过程所需要的工作仅限于网络广 播、检索以及简单的验证性计算，因此 PoC 机制对高性能计算资源以及电力能源的消耗可以被降到最低限度。在同等安全条件下，PoC 运行所需的电力消耗仅为 PoW 机制的数百分之一数量级。 历史沿革 开源项目Burst是较早研究并实践PoC共识的数字加密货币，可被认为是PoC共识之先驱者。 PoC共识中所涉及的诸多重要机制与算法，通过Burst等项目提出或完善，并逐渐形成现存通行的算法。PoC共识中的诸多核心概念，如Plot过程、PoC2算法、Deadline、GenSig等，都来源于这些先驱者的构思、验证与总结。 Lava在充分吸收已有项目所展现的智慧与经验之基础上，结合最为稳定的比特币Codebase连同UTXO机制，又开创并实践了Lava特有的火石机制。Lava将长期愿景定位于“追求更加去中心化的数字加密货币”以及“成为全球存储空间的信任之根”，势必成为不可或缺的区块链基础设施。 了解更多… Lava白皮书详细阐释了PoC共识的基本原理与过程： https://www.lavatech.org/pdf BurstWiki对PoC概念的解释： https://burstwiki.org/en/proof-of-capacity/ Busrtcoinist对PoC共识过程与优点的总结： https://burstcoin.ist/2017/10/16/the-burst-mining-process-explained/ Lava社区为小白解读PoC原理： https://www.8btc.com/article/472229 Lava社区对比PoC与PoW之优劣： https://www.8btc.com/article/475470 Lava社区提供关于PoC与硬盘挖矿概念的辨析： https://www.8btc.com/article/478136 "},"mining/mining-plotting.html":{"url":"mining/mining-plotting.html","title":"Plotting Guides","keywords":"","body":"概念介绍 “P盘”是Plotting的俗称，指生成Plot文件并填入硬盘的过程。Plot文件是Poc挖矿所必须的基础数据，矿工的硬盘空余容量越大，即可填入更多Plot文件，增加成功出块的概率。如果您想参与Lava挖矿，必须在挖矿前使用由LAVA自行研发的P盘软件HyperPlotter预先完成P盘工作。 步骤一：获取publickeyid 首先，您需要更新全节点钱包至v0.4.1版本（包括lavad和lava-cli）。在新版本全节点中，使用getmineraddress命令获取您的pubkeyid。pubkeyid是使用您的私钥生成的唯一身份辨识符，用以代替旧标准中的Plot ID: 步骤二：下载p盘软件 HyperPlotter现已上线LAVA官网，其中包含 2个版本的HyperPlotter，版本v0.1.2适用于PoC2协议P盘，版本v0.2.2适用于PoC2+协议P盘。下载地址：https://www.lavatech.org/zh/poc2Upgrade 步骤三：启动p盘软件 每台p盘机器运行一份P盘软件 1.解压 HyperPlotter-x64-all.zip，进入poc2+v0.2.2文件夹。2.参数配置，右击runplotter.bat，选择编辑，如下： 3.配置好后，运行p盘软件：4.p盘完成后会显示如下图所示界面，如果没出现表示P盘任务未完成，重新执行第3步: 多实例运行 1.解压HyperPlotter-x64-all.zip，进入poc2+v0.2.2文件夹。2.参数配置，复制runplotter.bat多份，并重命名，每个P盘任务一个文件，如下配置了两个P盘任务：3.分别编辑两个文件的参数，注意：硬盘列表不要有重复，内存均匀分配，保证系统有足够的空闲内存可以使用: 4.分别运行p盘任务：5.P盘完成后会显示如下图所示界面，如果没出现表示P盘任务未完成，重新执行第4步： 以管理员身份运行 1.右击runplotter.bat，选择以管理员方式运行。2.右击 runplotter.bat，选择创建快捷方式，创建启动脚本的快捷方式，右击刚创建的快捷方式：3.打开属性窗口，如下，单击高级按钮:4.打开高级属性设置，如下钩选用管理员身份运行:最后确定，完成设置，后面即可以直接双击快捷方式来运行P盘任务；每个脚本单独按上面的步骤设置快捷方式即可。 "},"mining/mining-miner.html":{"url":"mining/mining-miner.html","title":"Miner Guides","keywords":"","body":"Miner教程 步骤一：下载Lava Miner 首先下载挖矿软件（Lava Miner），可前往Lava官网（www.lavatech.org） 顶部的下载栏目->Miner进行最新版本的下载。 步骤二：设置配置文件 完成下载后，首先需要配置好miner.conf 文件： 按照如下配置设置： { \"Mode\" : \"pool\", \"Server\" : 目标服务器地址，如\"192.168.3.86\", 即钱包节点所在的地址；如果lavad和Miner都在本机上跑，就填写“127.0.0.1”。 \"Port\": 8332, （主网为8332、测试网为18332） \"OwnerAddr\" : 即矿工的挖矿地址, \"HttpAccount\" : \"test\",请保持与您lavad中设置的rpcuser一致！ \"HttpPassWord\" : \"test\",请保持与您lavad中设置的rpcpassword一致！ \"AccountKey\" : \"sss\", \"UpdaterAddr\" : 目标服务器地址，如\"192.168.3.86\", 即钱包节点所在的地址；如果lavad和Miner都在本机上跑，就填写“127.0.0.1”。 \"UpdaterPort\": “8332”, （主网为8332、测试网为18332） \"InfoAddr\" : \"127.0.0.1\",不填写则默认本机。 \"InfoPort\": \"8124\", \"EnableProxy\": false, \"ProxyPort\": 8126, \"Paths\": P 盘的盘符数组，形如：[\"E:\\\",\"C:\\\"], 如果有多个盘符，就输入多个，中间以逗号隔开 \"CacheSize\" : 16384, \"CacheSize2\" : 262144, \"Debug\": true, \"UseHDDWakeUp\": true, （如果不想看到HDD WAKEUP提示，可以设定为“false”） \"TargetDeadline\": 80000000, \"SendInterval\": 100, \"UpdateInterval\": 950, \"UseLog\" : true, \"ShowWinner\" : false, \"UseBoost\" : false, \"MinerName\": \"sun\", （单台矿机的识别名字） \"WinSizeX\": 76, \"WinSizeY\": 60 } a.主网RPC端口为8332，测试网RPC端口为18332； b. 挖矿启动一定要加rpcuser与rpcpassword； c. 挖矿配置文件需要配置(\"Server\" ,\"Port\",\"OwnerAddr\" ,\"HttpAccount\" ,\"HttpPassWord\" ,\"UpdaterAddr\" ,\"UpdaterPort\", \"Paths\") d.挖矿地址要与Plot ID相对应。 步骤三：开始挖矿 配置完成后，保存，并将该文件放在 lava-miner.exe 相同的目录下，然后启动lavad，并等待钱包成功同步；钱包成功同步后，双击 lava-miner.exe 即可开启挖矿。 "},"mining/mining-binding.html":{"url":"mining/mining-binding.html","title":"Binding","keywords":"","body":"了解算力绑定 什么是算力绑定？ 算力绑定是Lava特有的算力调配机制。 算力绑定允许用户将自身硬盘容量算力绑定到另一用户，使得双方出块Coinbase收益都转入被绑定放地址。 一个简单例子：Alice有挖矿地址（Address A）与1TB硬盘容量算力，Bob有挖矿地址（Address B）与300TB硬盘容量算力。 Alice可发起一笔绑定交易，将自身算力绑定到Bob身上。 挖矿时，如果Alice出块，该块会记录Alice的Plot ID（即认为是Alice出块），但Coinbase交易的收益地址是Bob的地址（Address B）； 如果Bob出块，该块会记录Bob的Plot ID（即认为是Bob出块），且Coinbase交易的收益地址仍是Bob的地址（Address B）。 算力绑定的意义 算力绑定的目的是，出块较少的小型算力单位（如本例中的Alice）可以通过绑定更大型的算力单位（如本例中的Bob），达到增强算力单位以平滑挖矿收益的目的。 收益分配问题 需要注意的是，绑定发起方与被绑定方需要约定收益的分配规则。 这一分配方式是私下达成的，没有客观标准。 例如，上例中，Alice可以要求无论双方实际出块多少，Alice都固定分得Bob的地址（Address B）中奖励总金额的1/300。 无论何种分配规则，只需绑定发起方与被绑定方达成约定即可。奖励分配的具体操作行为也完全由双方私下约定并实施，并非链上行为。 "},"mining/mining-bindingoperation.html":{"url":"mining/mining-bindingoperation.html","title":"Binding Operation","keywords":"","body":"发起与解除算力绑定 发起绑定 .\\lava-cli.exe -rpcuser=test -rpcpassword=test bindplotid \"发起绑定地址\" \"接受绑定地址\" 例如矿工甲（持有挖矿地址A）可以发起算力绑定到矿工乙（持有挖矿地址B）。绑定后，甲、乙都可正常挖矿。 当甲的Plot ID出块时，对应的Coinbase奖励会发到乙的地址B。 绑定成功后，程序会返回绑定交易的ID。 查询绑定情况 .\\lava-cli.exe -rpcuser=test -rpcpassword=test listbindings 查询后程序会展示全网目前的绑定关系。 例如： [ { \"from\": { \"address\": \"nfmJmsGPgoJGPYsDj4Z5CfpWUQQHHD\", \"plotid\": 41940084074803714 }, \"to\": { \"address\": \"n2sGZMd2K38SS4yPwEL7NDTJ3pvST6G\", \"plotid\": 862315404337908960 } ] from项表示发起绑定人的信息（包括地址与Plot ID）、to项表示接受绑定人的信息（Plot ID）。 解除已有的绑定关系 .\\lava-cli.exe -rpcuser=test -rpcpassword=test unbindplotid \"自己的地址\" 执行此命令后，节点即会向全网广播解除绑定动作的交易，程序会返回该解绑交易的交易ID；待该交易被打包入块上链后，解除绑定动作正式生效。 "},"mining/mining-faq.html":{"url":"mining/mining-faq.html","title":"Mining FAQ","keywords":"","body":"挖矿FAQ PoC挖矿就等同于硬盘挖矿吗？ PoC挖矿确实使用了硬盘这一存储介质进行挖矿，但PoC并不完全等同于“硬盘挖矿”。首先，PoC可以使用任何存储介质存储Plot文件参与共识过程，并不局限与硬盘，只是从目前来说机械硬盘（HDD）是参与PoC较为高效和经济的选择。其次，硬盘挖矿也可以不基于PoC机制，例如IPFS的Filecoin项目就提供了基于Proof-of-Spacetime的奖励机制，使硬盘空间贡献者获得经济利益，而这一机制与PoC完全不是一回事。 什么是P盘？ “P盘”是指生成Plot文件的过程。PoC共识可以使用硬盘挖矿，但并是不所有空置的、或者存放有其他有用数据的硬盘都可以用于PoC挖矿。用于挖矿的硬盘必须预先生成一种特殊的数据并填满硬盘空间，被这种特殊数据填充的空间容量才是对PoC共识来说有效的空间容量。这种特殊的数据技术上称为“Plot文件”，需要使用特定的软件（目前有第三方免费版）处理生成。对于PoC挖矿来说，P盘是必要的准备工作。 PoC挖矿是否依赖高性能的CPU和显卡？ 单就PoC挖矿来说，对CPU、显卡和硬盘速度都没有要求，只要是正常性能都可满足。但对于P盘来说，更高性能的CPU或显卡可以加快P盘速度。总而言之，更高的CPU、显卡和硬盘速度对于增加PoC收益来说作用是微乎其微的，它们并不太大程度地影响PoC共识。 "},"geeks/geeks-opensource.html":{"url":"geeks/geeks-opensource.html","title":"Lava Open Source","keywords":"","body":"Lava开源代码 Lava是一个开源社区，遵循完全开源、平等、去中心化的核心精神。 Lava于2019年8月主网（MainNet）上线之前，明确宣布将会于主网上线后的短期内完成代码开源，接受社区的管理和监督。2019年10月，Lava源代码正式完成开源。 Lava鼓励社区用户、开发者社区成员共同维护项目代码，以及积极提出针对Lava协议、应用与生态的改进提案。为此，Lava提出Lava改进提案系统（LVIP），旨在建立可以由社区永续运营和维护的去中心化区块链项目。 前往lavaio项目主页： http://github.com/lavaio 前往lava源代码页面： https://github.com/lavaio/lava 前往Lava协议改进提案系统（LVIP）主页： https://github.com/lavaio/lvips "},"geeks/geeks-lvipbasics.html":{"url":"geeks/geeks-lvipbasics.html","title":"LVIP","keywords":"","body":"了解LVIP LVIP：Lava Improvement Proposal（Lava改进提案） LVIP-0001： LVIP: 0001 Title: A Proposal for LVIP Author: lavatech Status: Draft Type: Process Created: 2019-10-12 Superseded-By: None 文档说明 LVIP是Lava（简写LV）的改进提案系统。 LVIP-0001是第一例改进提案，用于定义LVIP的设计思想、操作流程以及基本格式规范。因此，该文档本身即LVIP-0001的提议内容。 LVIP的定义 LVIP是以文本文件形式维护和管理的Lava改进提案机制。 LVIP本身是一个设计文档，用于提供与Lava有关的重要信息、提出关于Lava协议的新特性、或者提出关于Lava相关各项流程的改进建议。 LVIP的初衷是希望通过规范的、可追溯的形式管理社区和开发者提出的建议，以及关于这些建议的思考和讨论过程。LVIP将成为Lava的协议升级和社区治理管理机制的重要决策制度。这将符合Lava作为一个开源的、完全去中心化的区块链协议的核心价值观。 LVIP的类型 LVIP可被分为以下两种类型（Type）： 协议类（Protocol）：涉及Lava协议层面的改进，此类改进往往要求对Lava协议代码作出变动。 非协议类（Non-Protocol）：涉及协议层面以外的改进，例如关于用户使用，挖矿，以及包括对LVIP机制本身的修改。此外，LVIP也可能不涉及任何新的特性或功能，仅仅对重要问题作出规范性的解释或告知，或者是提供某种面向社区/用户/矿工的准则。总而言之，非协议类可能包含信息告知、管理流程与其他规范性问题，并不影响Lava协议代码的改动升级。 LVIP的提出者和审核者应当谨慎对待分类的准确性，不同的分类有不同的结果导向和处理流程。 LVIP的处理流程标准 一个LVIP的生命周期包含以下状态节点： Draft：草案阶段。LVIP的提出者可在对特定问题形成初步建议与解决方案时撰写LVIP草案，并与社区讨论。社区讨论不是强制性的，但是我们仍然希望草案的提出者能够至少就草案在技术社区范围内发起讨论，并引收集来自社区的意见，这个过程将极大地收集技术社区的群体智慧，也会成为LVIP评审小组（Panel）进行最终评定赋予LVIP身份的重要参考。 Accepted：正式生效阶段。这意味着该草案已经正式成为LVIP，并被赋予唯一编号。LVIP的编号按照Accept时间顺序赋予。对于较晚的LVIP替代先前的LVIP的情况，两者仍然保留自己的编号，并生成Replaced-superceded关系。 对于正式生效的LVIP，Lava开发团队将其列入一个公开的LVIP List，其详细信息将被长期保留并对外公开展示。 对于协议类LVIP，涉及是否更新Lava协议代码的问题，是最为事关重大的LVIP类型。一个已经生效的协议类LVIP应当引起更大范围的社区讨论，并通过可被书面记录的形式进行协议更新的决策。需要注意的是，协议类LVIP应当要求提出者在Accepted阶段前提供较为成型的代码方案，否则不应予以生效。 协议类LVIP的提出者可以在LVIP中约定所希望的决策形式，以决定改协议改动是否应当被实现在最新版本的Lava协议代码中。 LVIP的Panel Panel（评审小组）是常设的、非营利的机构。 原则上要求Panel小组成员来自于Lava核心开发团队以及活跃的技术社区成员，并且有过参与Lava核心协议代码或其他重要技术工作的经验。 Panel小组成员应当对社区公开联系方式（电子邮箱），以便于社区成员可以就LVIP草案内容与Panel进行提前沟通与讨论。 LVIP草案的提出者应当在准备完成较为成熟的构思、描述以及代码解决方案后，联系Panel小组成员。Panel将以集体形式最终选择Accept或Reject草案，并按规定赋予LVIP编号（如果Accept）。无论Panel最终决定Accept或Reject草案，都应当以书面形式给出理由。因此，Panel既承担日常流程维护的角色，也承担对LVIP内容进行判断和决策的角色。 Panel小组成员以集体讨论和集体决策为核心组织制度维持Panel和LVIP体系的日常运转。Panel小组成员是可流动的，成员之间可以通过讨论协商进行变动安排，但应当要求任何时候Panel小组成员的联系方式都对社区公示（以Mail List形式）。 LVIP的文档格式标准 所有LVIP草案都应当遵循以下格式标准编写LVIP的Header： LVIP: 编号 Title: 名称（能够表达该LVIP的主要内容） Author: 作者，可以匿名 Status: LVIP状态，包括Draft、Accepted、Replaced Type: LVIP的类型，包括Protocol、Non-Protocol Created: 创建时间 Superseded-By: 如果被Replaced，则展示后继者的LVIP编号。 此外，作者应在LVIP的正文中描述以下内容： 提出LVIP的动机，和试图解决的问题。 与技术社区成员或更广泛社区成员讨论后的意见整理。虽然该内容不是必须的，但我们鼓励LVIP作者就LVIP的构思、内容和解决方案获取更大范围的支持与认同。对于没有经过讨论、没有得到反馈和支持的LVIP草案，Panel可能需要慎重考虑是否Accept该草案。 对于非协议类LVIP，作者可以直接在正文中详细描述需要表达的内容，如想要给出的informational content。 对于协议类LVIP，作者应当提出较为成熟的解决方案构想与代码内容。 "},"geeks/geeks-lviplist.html":{"url":"geeks/geeks-lviplist.html","title":"LVIP List","keywords":"","body":"LVIP列表 LVIP-0001: https://github.com/lavaio/lvips/blob/master/lvip-0001.mediawiki LVIP是Lava（简写LV）的改进提案系统。LVIP-0001是第一例改进提案，用于定义LVIP的设计思想、操作流程以及基本格式规范。因此，该文档本身即LVIP-0001的提议内容。 LVIP-0002： https://github.com/lavaio/lvips/blob/master/livp-0002.mediawiki LVIP-0002建议了一种允许用户预先构造花费火石的交易，即冷火石。 该机制下，用户可以购买火石到自己的地址，并在购买火石交易的基础上构造下一笔花费火石的交易。该机制可以实现的效果是，用户不再需要将火石购买到他人地址上，也可以让他人花费该火石。 该机制的目的是保护用户资金安全，让火石机制更加去中心化和去信任化。 冷火石的运行过程可被拆解为：先由火石购买者将购买的火石“加工”为冷火石并发送给实际使用者，火石使用者“装填”冷火石使其进入待用状态。 "},"geeks/geeks-roadmap.html":{"url":"geeks/geeks-roadmap.html","title":"Footprint and Roadmap","keywords":"","body":"发展路线图 "},"geeks/geeks-atomicswap.html":{"url":"geeks/geeks-atomicswap.html","title":"Atomic Swap","keywords":"","body":"跨链原子交换机 "},"geeks/geeks-coldfs.html":{"url":"geeks/geeks-coldfs.html","title":"ColdFirestone","keywords":"","body":"冷火石 "},"geeks/geeks-bountyforplotter.html":{"url":"geeks/geeks-bountyforplotter.html","title":"Bounty-OpenSourcePlotter","keywords":"","body":"赏金计划-开源P盘软件 "},"wallet/wallet-basics.html":{"url":"wallet/wallet-basics.html","title":"Lava Wallets","keywords":"","body":"了解Lava钱包 加密货币钱包 在加密货币的世界中，钱包（Wallet）是指一种可用于储存私钥并管理加密货币资产的应用工具。 钱包可以做什么： 储存您的私钥和地址； 发起和接受转账交易； 查询钱包余额和历史交易记录； 对消息进行签名； 生成、创建新的私钥和地址； 全节点钱包与轻钱包 依据工作原理的区别，钱包可以分为： 全节点钱包（Full-Node Wallet） 轻钱包（Light Wallet） 中心化钱包（Centralized Wallet） 全节点钱包本质上是一个区块链网络中的节点程序，对区块链全部链上数据保持完整同步的状态。全节点钱包有完全意义上的独立性，其运行不依赖任何第三方支持，可以自主完成各项功能操作。但是，正因为全节点钱包需要同步完整的区块链数据，它对网络连接、存储空间等要求也比较高，运行维护有一定的复杂性。 轻钱包是在全节点钱包的基础上，为适配更简单、更基础的用户需求而设计的轻量级钱包。轻钱包不需要维护完整的区块链数据，仅需同步区块头（Block Header）信息，并与全节点服务器进行SPV支付验证，即可进行常规的查询、发起转账和接受转账的操作。轻钱包占用系统资源、存储空间很小，因此也适合在移动端使用。轻钱包需要依赖专用的服务器才能正常运行，并不能像全节点钱包那样完全独立自主运行；不过，您可以放心的是轻钱包能够完全在本地储存和管理您的私钥。 中心化钱包是由第三方运营维护的钱包应用，为用户统一管理私钥并完成相关动作。您可以理解为中心化钱包是一个由供应商提供的服务，用户仅需接触和操作简单的用户界面，即可对自己的加密货币资产进行管理。中心化钱包非常依赖第三方提供服务，存在因第三方主观原因导致资产丢失的风险。不过，中心化钱包往往有较高的集成度，操作上对用户也较为友好和便捷，适合嵌入多币种管理、OTC交易、理财工具等衍生应用。 Lava提供的钱包 目前，Lava官方提供（或由社区志愿者提供但经官方认证）的钱包产品已经有以下若干种： Linux全节点钱包 Windows全节点钱包 Mac OS全节点钱包 Windows轻钱包 Windows GUI全节点钱包（带有图形界面） Mac OS GUI全节点钱包（带有图形界面） Android手机钱包（轻钱包） 用户可以前往官方网站的下载链接进行下载： https://www.lavatech.org/ "},"wallet/wallet-lavacore-win.html":{"url":"wallet/wallet-lavacore-win.html","title":"Windows LavaCore","keywords":"","body":"Windows全节点钱包使用教程 步骤一：下载最新版本全节点钱包 首先下载最新版本的钱包（windows全节点钱包），可前往Lava官网（www.lavatech.org）顶部的下载栏目进行下载： 步骤二：解压缩 解压下载后的压缩包，解压后有lavad.exe和lava-cli.exe。 步骤三：运行Lavad并完成同步 在执行文件目录下，按住shift右击打开powershell,如下图：a.在打开的powershell界面中输入.\\lavad -rpcuser=test -rpcpassword=test，然后回车，启动钱包。如下图：lavad启动后，请等待程序自动同步至最新块高（最新块高信息可以在区块链浏览器中获得，同步过程可能需要消耗一定时间）。 步骤四：在钱包客户端（lava-cli.exe）内进行钱包操作 b.在执行目录下打开一个新的powershell（原lavad的窗口保留即可，无需再进行任何操作），输入.\\lava-cli -rpcuser=test -rpcpassword=test getblockchaininfo可以查询链当前信息，chain值表示连接的区块链是主网（main）还是测试网（test）；blocks值表示当前已经同步到的区块高度。如下图：c.如果需要查询帮助（会展示所有可用的命令列表）,输入.\\lava-cli -rpcuser=test -rpcpassword=test help。如下图：d.生成挖矿地址与Plot ID，输入.\\lava-cli -rpcuser=test -rpcpassword=test getmineraddress获取。如下图：e.备份钱包文件 ，输入.\\lava-cli -rpcuser=test -rpcpassword=test dumpwallet \"filename\"。filename为文件名，可以自己另取。如下图：f.导入钱包文件，输入.\\lava-cli -rpcuser=test -rpcpassword=test importwallet \"filename\"。”filename”为前面备份的钱包文件，需要带上路径。如下图：g.停止钱包，输入.\\lava-cli -rpcuser=test -rpcpassword=test stop。如下图：h.导出私钥，输入.\\lava-cli -rpcuser=test -rpcpassword=test dumpprivkey \"address\"。 其中address为钱包地址。如下图：i.导入私钥 ,输入.\\lava-cli -rpcuser=test -rpcpassword=test importprivkey \"key\" true。 其中key为需要导入的私钥。如下图:j.设置交易费，输入.\\lava-cli -rpcuser=test -rpcpassword=test settxfee 0.00001。如下图:k.查询钱包余额，输入.\\lava-cli -rpcuser=test -rpcpassword=test getbalance。如下图：l.绑定算力，输入.\\lava-cli -rpcuser=test -rpcpassword=test bindplotid \"fromaddress\" \"targetaddress\"。其中fromaddress为p盘的plotid对应的那个地址，targetaddress为接受出块币奖励的地址。如下图：m.查询绑定关系，输入.\\lava-cli -rpcuser=test -rpcpassword=test listbindings 。如下图：n.解绑算力，输入.\\lava-cli -rpcuser=test -rpcpassword=test unbindplotid \"address\"。如下图: "},"wallet/wallet-guiwallet.html":{"url":"wallet/wallet-guiwallet.html","title":"Windows LavaCore GUI","keywords":"","body":"Windows全节点GUI钱包教程 第一次使用钱包以及安全事项 1.钱包数据库文件 GUI钱包属于有图形界面的全节点钱包，因此需要维护完整的区块链数据以及钱包文件。 默认的本地数据库文件路径为： Windows(C:)->User->[您的用户名]->AppData->Roaming->Lava 特别提示：如果您同时运行了非GUI版本的Lava全节点钱包，两者会共享数据库文件。 2.备份钱包 用户可以随时备份钱包文件，并自定义备份文件的存放位置与文件名称。 只要保存好备份文件，用户就可以恢复钱包以及钱包中的资产。 3.设置操作密码（非必须） 用户可以在总菜单“设置”下设置钱包操作密码。 注意，该密码是指对GUI钱包进行操作的解锁密码；设定密码后，用户必须先解锁才能使用钱包进行具体操作，例如收发币、购买火石等等。 解锁时，请进入控制台，并调用walletpassphrase命令进行解锁，如下两图所示： 使用该命令的输入示例： walletpassphrase abc123 1000 示例中输入的abc123为设定的密码、1000表示在1000秒内保持解锁状态。 4.同步区块 在初次使用钱包、或者一段时间未使用后再启动钱包的情况下，钱包需要同步到最新区块高度，如上图所示。 当钱包进行同步时，请耐心等待同步完成，未同步完成的钱包是无法使用的。 常规操作 1.常规功能 功能栏提供常用功能的界面： “概况”可以查看钱包余额。 “发送”可以发起一笔转账交易。 “接收”可用于生成一个付款请求，但由于钱包不支持生成二维码，因此一般无需动用该功能界面。 “交易记录”可查看钱包历史上发生的交易，并针对相关要素进行排序展示。 2.控制台 点击菜单的“窗口”->“控制台”，可以打开控制台界面。 由于本钱包是一个全节点钱包，因此也可支持所有正常全节点钱包所支持的功能。 因此，有技术基础的用户可以直接在控制台中以命令行形式与钱包节点交互。 矿工地址与算力绑定操作 1.生产矿工地址与Plot ID 点击“生成新Plot ID”按钮，即可获得全新的矿工地址以及配套Plot ID。 该矿工地址储存在钱包中，请注意定时备份。 2.绑定Plot ID与解绑 在该界面右下角处可进行绑定Plot ID以及绑定后的解绑操作。 3.查询绑定信息 在界面右上角处可输入您的挖矿地址，查询该地址当前是否处于绑定状态。 火石操作 1.查询火石周期信息 火石界面左上角可显示当前周期的相关信息。 该信息也可在区块链浏览器的“Firestone Summary”板块中查看。 2.购买火石 火石界面右上角提供了购买火石功能。 1）如果您需要给自己的挖矿地址购买火石，在“地址”栏中填入您的挖矿地址、在“找零地址”栏中填入您想要接收找零资金的地址。 2）如果您需要给其他人的地址购买火石，在“地址”栏中填入目标挖矿地址、在“找零地址”栏中填入您想要接收找零资金的地址。 *警告：当您给其他人的地址购买火石时，用于购买火石的抵押资金会脱离您的控制，请务必注意目标地址是否为可信者所控制。 3.查询火石 火石界面左下角提供了查询一个地址当前拥有火石的情况。 如上图所示，输入您想要查询的地址，钱包会自动弹窗展示该地址下的火石信息。 4.释放火石 当您购买的火石过期后，需要手动释放火石抵押的资金（LV）。 在“地址”处填入持有火石的地址、在“接收地址”处填入您想要接收所释放的抵押资金的地址。 *注意：您只能释放由您所控制的地址下的火石（也就是您拥有该地址的私钥）。如果您将火石购买到其他人的地址，只能由对方进行释放操作。 "},"wallet/wallet-winlightwallet.html":{"url":"wallet/wallet-winlightwallet.html","title":"Windows SPV Wallet","keywords":"","body":"Windows轻钱包教程 操作指南 1.浏览Lava官网 (lavatech.org)，下载最新版本windows轻钱包，下载完成后打开钱包。创建一个新的钱包，请选择第一项“创建一个标准钱包”；使用已有的私钥或地址导入钱包，请选择第三项“Import Lava address or private keys”。本教程以创建标准钱包步骤为例。如果需要通过导入私钥或地址导入钱包，选择对应选项操作即可。 *特别提醒：如果是通过导入已有的地址创建钱包，只能创建“仅供观察”的钱包，您无权进行任何实质性操作（例如发起转账）。 2.点击下一步进入到密钥库。因为是创建新钱包，所以应选择创建一个新的密语种子。密语种子请务必妥善保存，可用来恢复钱包。如果您以前创建过钱包，已经有密语种子，则可选择“我已经有一个密语种子”并输入已有密语种子来恢复钱包。 3.选择种子类型，建议选择隔离见证地址类型（否则钱包无法支持涉及隔离验证地址的部分功能）。如果是通过已有的密语种子或者私钥来打开钱包，则会跳过此步骤： 4.点击下一步，钱包会自动生成12个英文单词组成的密语种子，拥有密语种子可以再钱包丢失时恢复钱包，因此建议大家用可靠方式将密语种子记录并妥善保存： 5.输入刚抄下的12个单词密语种子进行二次确认： 6.设定钱包的访问密码。设定访问密码是可选功能，如果您不想要设定访问密码，则留空并点击下一步即可。 7.密码设置完成后，就可以进入钱包主界面进行支付和收款了： 8.支付（发起转账）时，在支付栏输入接收人的地址，金额栏输入转账的金额。在“费用”处可以手动定义交易的手续费水平。点击“发送”即可完成支付。如果您设置了钱包密码，则还需输入密码才能完成支付。 9.收款时，进入收款界面，钱包会自动生成收款地址。您可以复制该收款地址。此外，钱包提供了自动生成二维码功能，该二维码集成了您在收款界面所填写的所有信息（收款地址、金额等），因此您也可以直接向对方（付款人）展示二维码来代替文本形式的收款地址。 10.对于已经创建的钱包，我们可以对其进行备份，以防止因钱包不慎遗失导致损失。点击文件->保存副本，即可对钱包文件进行备份。备份文件也可以用于直接恢复钱包（通过文件->打开进行操作）。 11.如需导出钱包私钥，点击钱包选择私钥，导出即可： 12.如需修改钱包访问密码，点击菜单栏的钱包->密码，即可修改钱包访问密码： 13.点击菜单栏的工具->偏好设置，可进行钱包设置。①可切换英文版本钱包，切换后需重启钱包才会生效；②还可设置找零地址，金额的显示位数、金额的基本单位等参数；一般来说，系统参数都遵循默认设置即可，无需刻意改动。 疑问解答 1、同样是备份钱包，备份密语种子、备份钱包文件、备份私钥有什么区别？ 在数字货币的世界中，私钥控制一切，因此拥有私钥代表拥有对数字资产的控制权。所有的备份钱包行为，本质都是备份私钥，但在形式上、效果上略微有所区别。 所有的轻钱包都可支持两种生成方式：一种是通过密语种子（也有称为助记词）生成，另一种是直接导入已有的私钥生成。密语种子可以推算出若干个私钥，因此您可以将密语种子粗浅理解为若干个私钥的根数据。因此，对于通过密语种子生成的轻钱包，您只需备份密语种子，就意味着您备份了所有通过该种子推算出的私钥。但是对于直接导入已有的私钥生成的轻钱包，则不存在密语种子的说法，你还是需要单独备份已有的私钥。 备份钱包文件，则是对轻钱包当前所有的信息进行留存备份，除了钱包管理的若干个私钥、地址以外，甚至还可连同备份钱包中的个性设置。因此您如果备份有钱包文件，则可以最迅速、最完整地恢复您的轻钱包。 总结：如果您是通过密语种子创建了新的轻钱包，我们建议您妥善保管好密语种子，外加定期备份钱包文件；如果您是导入已有的私钥到轻钱包，我们建议您妥善保管好私钥，外加定期备份钱包文件。 "},"wallet/wallet-androidlightwallet.html":{"url":"wallet/wallet-androidlightwallet.html","title":"Android Wallet","keywords":"","body":"Android轻钱包教程 "},"wallet/wallet-faq.html":{"url":"wallet/wallet-faq.html","title":"Wallet FAQ","keywords":"","body":"钱包FAQ 我应该使用全节点钱包还是轻钱包？ 如果您只需要用钱包进行发起转账、接收转账这样的基础操作，仅需使用轻钱包即可。 需要注意，轻钱包目前尚不支持进行算力绑定、购买火石等操作，如果有相关需求请使用全节点钱包。 此外，Lava提供GUI（图形界面）版本的全节点钱包，对于无需挖矿、但希望使用钱包进行购买火石操作的用户，建议使用此版本。 为什么我的两个钱包显示余额不同？ 很多用户（尤其是矿工）希望以轻钱包配合全节点钱包的形式管理自己的Lava资产。常见的做法是将全节点钱包的私钥导出再导入轻钱包。但是，用户可能会发现两个钱包显示的余额不一致，往往表现为轻钱包余额少于全节点钱包。这是何故？ 主要原因是，钱包的业务逻辑并非仅仅被设计为管理单个私钥，而是管理一系列私钥。在用户发起转账交易时，钱包会生成新的找零地址接受找零的交易输出。而当用户导出全节点钱包的私钥时，往往只导出了挖矿地址的私钥，导致遗漏了全节点钱包内其他零散的找零地址所管理的余额。 我们建议用户不要将不同类型的钱包混合使用，这会给私钥管理带来更多的风险。参与挖矿的用户可以定期将挖矿收益转账到独立的轻钱包地址以便于后续管理。 "}}